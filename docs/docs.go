// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/ping": {
            "get": {
                "description": "Do a simple ping to test the server and get a pong response if active",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ping Test"
                ],
                "summary": "responds with a simple JSON reply.",
                "responses": {
                    "200": {
                        "description": "Pong response"
                    }
                }
            }
        },
        "/receipts/process": {
            "post": {
                "description": "Send a valid receipt in json format to the server and get its ID back if validated and stored in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Receipt"
                ],
                "summary": "responds with the ID of the given receipt, if created.",
                "parameters": [
                    {
                        "description": "Receipt object",
                        "name": "receipt",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Receipt"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ID of the newly created receipt"
                    },
                    "400": {
                        "description": "Invalid receipt"
                    }
                }
            }
        },
        "/receipts/{id}/points": {
            "get": {
                "description": "Send a valid receipt ID to the server and get its points score if present",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Receipt"
                ],
                "summary": "responds with the points of a receipt by its ID.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Receipt ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Points for the receipt"
                    },
                    "404": {
                        "description": "No receipt found"
                    }
                }
            }
        }
    },
    "definitions": {
        "model.Item": {
            "type": "object",
            "required": [
                "price",
                "shortDescription"
            ],
            "properties": {
                "price": {
                    "type": "string"
                },
                "shortDescription": {
                    "type": "string"
                }
            }
        },
        "model.Receipt": {
            "type": "object",
            "required": [
                "items",
                "purchaseDate",
                "purchaseTime",
                "retailer",
                "total"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/model.Item"
                    }
                },
                "points": {
                    "type": "integer"
                },
                "purchaseDate": {
                    "type": "string"
                },
                "purchaseTime": {
                    "type": "string"
                },
                "retailer": {
                    "type": "string"
                },
                "total": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
